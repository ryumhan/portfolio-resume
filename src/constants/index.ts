import { Company } from '@/model/company';
import { Introduce } from '@/model/introduce';
import { Project } from '@/model/project';
import { SkillSet } from '@/model/skill';

export const MENU_CONFIG = ['RYU MYUNGHAN', 'CAREER', 'PROJECT'];

export const INTRODUCTION_CONFIG: Introduce = {
  name: '류명한',
  email: 'ryum7han@gmail.com',
  phone: '010-9947-7564',
  comment: '호기심 많은 FE 개발자 류명한 입니다.',
  appeal: [
    '빠르게 개발을 진행하는 것보다 곰곰히 생각해서 항상 더 나은 코드를 만들기 위해 노력합니다.',
    '이야기를 통해 다양한 사람들의 개발 노하우를 공유하는 것을 굉장히 즐거워 합니다.',
    '어떠한 문제 상황, 마찰이 생겼을 때 영원한 정답은 없다는 생각으로 항상 끊임 없이 성찰합니다.',
  ],
  education: [
    { location: '인하대학교 정보통신공학과, 기계공학(복)', duration: ['2011.03', '2018.02'] },
    { location: 'LG전자 SW 교육', duration: ['2018.03', '2018.05'] },
    { location: 'OPC UA IoT 교육', duration: ['2019.12', '2019.01'] },
  ],
};

export const CAREER_PATH: Company[] = [
  {
    name: 'LG 전자',
    duration: 1.2,
    description: '"시스템 에어컨 실외기 SW 제어로직 개발 및 시험 측정"',
    relation: 1,
  },
  {
    name: 'SDPLEX',
    duration: 2.8,
    description: '"윈도우/리눅스 기반의 IoT 플랫폼 개발 및 제어 프로그램 FE/BE 개발"',
    relation: 2,
  },
  {
    name: '콩테크',
    duration: 0.9,
    description: '"3D 오브젝트, 위치 기반의 관리자 서비스 FE 개발, 키오스크 앱 개발"',
    relation: 3,
  },
  {
    name: '이직중',
    duration: 0,
    description: '""',
    relation: 4,
  },
];

export const SKILLSET_CONFIG: SkillSet[] = [
  {
    total: 5.5,
    title: 'Languages',
    skillSet: [
      { skillName: 'C/C++', duration: 2.5, img: '/images/c-image.png', relations: [1, 2] },
      { skillName: 'Go', duration: 0.6, img: '/images/go-image.png', relations: [2] },
      { skillName: 'TypeScript', duration: 2.4, img: '/images/typescript-image.png', relations: [2, 3] },
    ],
  },
  {
    total: 5.1,
    title: 'FrontEnd',
    skillSet: [
      { skillName: 'Electron', duration: 1, img: '/images/electron-image.png', relations: [2, 3] },
      { skillName: 'React(CSR)', duration: 2, img: '/images/react-image.png', relations: [2, 3] },
      { skillName: 'ReactNative', duration: 0.6, img: '/images/react-native-image.png', relations: [3] },
      { skillName: 'NextJs', duration: 0.5, img: '/images/nextjs-image.png', relations: [3] },
      { skillName: 'ReactQuery', duration: 0.6, img: '/images/react-query-image.png', relations: [3] },
      { skillName: 'Mobx', duration: 0.4, img: '/images/mobx-image.png', relations: [3] },
      { skillName: 'Redux', duration: 1.1, img: '/images/redux-image.png', relations: [3] },
    ],
  },
  {
    total: 1.2,
    title: 'Deployment',
    skillSet: [
      { skillName: 'Kubernetes', duration: 0.6, img: '/images/kubernetes-image.png', relations: [2] },
      { skillName: 'Docker', duration: 0.6, img: '/images/docker-image.png', relations: [2, 3] },
    ],
  },
  {
    total: 5,
    title: 'Git',
    skillSet: [
      { skillName: 'GitLab', duration: 2, img: '/images/gitlab-image.png', relations: [2] },
      { skillName: 'BitBucket', duration: 3, img: '/images/bitbucket-image.jpeg', relations: [3] },
    ],
  },
  {
    total: 3.6,
    title: 'Test',
    skillSet: [
      { skillName: 'Gtest', duration: 2.8, relations: [2] },
      { skillName: 'Jest', duration: 0.8, relations: [2, 3] },
    ],
  },
  {
    total: 2.1,
    title: 'Etc',
    skillSet: [
      { skillName: 'Kubernetes API Server', duration: 0.8, relations: [2] },
      { skillName: 'Public Transportation API', duration: 1, relations: [3] },
      { skillName: 'NestJS(BE)', duration: 0.3, relations: [] },
      { skillName: 'grpc', duration: 0.5, relations: [2] },
      { skillName: 'protobuf', duration: 0.5, relations: [2] },
      { skillName: 'socket 통신', duration: 1, relations: [2] },
      { skillName: 'yarn-berry', duration: 0.5, relations: [3] },
      { skillName: 'GraphQL', duration: 0.3, relations: [] },
    ],
  },
];

export const PROJECT_CONFIG: Project[] = [
  {
    title: 'ORBRO 플랫폼',
    type: 'Web',
    role: 'V1 유지 보수 및 V2 신규 FE 개발(팀원)',
    skill: ['react', 'redux', 'mapbox', 'stylus', 'emotion/styled-component'],
    descriptions: [
      '3D 오브젝트, 위치 기반의 관리자 서비스 플랫폼',
      '사용자의 사업적 목적에 따라, 관리자 서비스를 커넥티드앱 형태로 확장 가능한 플랫폼',
      '사용자가 이용하는 건물 클릭시, 사용자가 구독한 앱 리스트 Display',
      'MapBox를 통한 3D 오브젝트 표시',
      '주변 공공 교통 수단에 대한 정보 및 날씨 정보 Display',
      'EventBus 를 통한 MapBox 상태 관리',
      '플랫폼내에 확장된 커넥티드 앱은 Iframe형태로 존재',
      'PostMessage 를 통해, Iframe 으로 연동된 커넥티드앱, 플랫폼간 데이터 통신',
      '로그인 시, 해당 사용자의 조직 정보를 통해 해당하는 빌딩 정보, 장치 정보, 권한 GET',
      '빌딩에 장치 존재시, 그리고 해당 장치 사용을 사용자 구독한 경우 빌딩 클릭시 가능한 앱 리스트 노출',
    ],
    contributions: [
      'Project 리딩(FE 개발 인원 3명, 3D 2명)',
      '로그인 로직 개선(서브 도메인 이동시 Persist Cookie 사용하도록 변경)',
      '키오스크 전용 UI 개발',
      '키오스크 전용 화면 보호 스케쥴러 개발',
      '코드 30% 리팩토링',
      'Code Convention 정립 및 Code Review 도입',
      '의존성이 높은 기존의 코드 View, Fetch, State 를 분리 하기 위해 Custom Hook 도입',
      '재사용성을 높이기 위해 공통 컴포넌트 및 공통 Hook 으로 통일',
    ],
    img: ['/project/platform1.jpg', '/project/platform2.jpg'],
    url: 'https://home.orbro.io',
  },
  {
    title: '공공 교통 Platform 앱',
    type: 'Web',
    role: 'FE V2 개발(개인)',
    skill: ['react', 'nextJs', 'emotion/styled-component', 'yarn-berry'],
    descriptions: [
      'ORBRO 플랫폼 내의 공공 데이터의 정보를 보여줄 수 있는 LS App(커넥티드 앱)',
      'ORBRO 플랫폼과 별도의 Deployment로 존재하며, 플랫폼에서 해당 url을 자식 태그 Iframe 으로 로드하는 방식',
      'SDK를 통해서만 ORBRO 플랫폼과 앱이 Token 과 Origin을 공유하기 때문에 플랫폼을 통해서만 접근 가능',
      '플랫폼 내의 공공 Object(CCTV, 버스, 지하철, 비행기 클릭시) 클릭시 해당 앱 Display',
      '공공 데이터 정보 (GET Method), 각 Object의 현재 정보를 실시간으로 보여줌',
    ],
    contributions: [
      '100% 개인 개발',
      '기존의 CSR 방식에서 클릭시 앱이 늦게 뜨던 문제를 NextJS로 Migration을 통해 해결',
      '플랫폼에서 클릭시 해당 Object에 대한 데이터 수신을 위한 postMessage 구현',
      'Docker 빌드 및 배포 소요시간 단축을 위해 yarn-berry 적용',
    ],
    img: [
      '/project/public-app1.jpg',
      '/project/public-app2.jpg',
      '/project/public-app3.jpg',
      '/project/public-app4.jpg',
      '/project/public-app5.jpg',
      '/project/public-app6.png',
    ],
    url: 'https://home.orbro.io',
  },
  {
    title: '건설 안전 관리자 서비스',
    type: 'Web',
    role: 'FE 신규 개발(개인)',
    skill: ['react', 'emotion/styled-component', 'redux', 'mabbox'],
    descriptions: [
      '건설현장 작업 안전을 위해 해당 지역에 사용자를 등록하고, 위험 구역을 설정, 관리 하는 서비스',
      '구역 설정 C.R.U.D, mapbox의 zone 설정을 통해 [위험/안전/작업] 구역을 UI를 통해 설정 하능 기능',
      '사용자 등록 C.R.U.D, 해당 작업장에 출입 가능한 사용자를 등록하는 테이블 기능',
      '사용자, 구역 맵핑 C.R.U.D, 사용자가 위험구역에 진입시 Push 알림을 전달 할 수 있도록 장치와 사용자를 맵핑하는 기능',
    ],
    contributions: ['100% 개인 개발', 'mapbox를 통해 지도상에 위험구역을 설정 할 수 있도록 UI 구현.'],
    img: [
      '/project/smart-safety-app2.png',
      '/project/smart-safety-app1.png',
      '/project/smart-safety-app3.png',
    ],
  },
  {
    title: 'Access 관리자 서비스',
    type: 'Web',
    role: '유지 보수 및 신규 기능 FE 개발(팀원)',
    skill: ['react', 'mapbox', 'redux', 'emotion/styled-component'],
    descriptions: [
      '실내 출입 기록 관리용 서비스',
      '허용된 사용자 및 방문자의 모바일이 출입문을 통과시 출입 여부를 판단하여 기록을 관리하는 것이 주된 기능',
      '날짜, 시간 기준으로 해당 장치를 통해 출입한 사용자를 차트를 통해 보여 주는 기능',
      '사용자/방문자 정보 C.R.U.D, 사용자를 등록 하는 기능',
      '장치 정보 C.R.U.D, 해당 건물에 등록된 장치 정보를 불러와 관리 하는 기능',
      '정책 C.R.U.D, 사용자, 방문자가 어떠한 방식으로 출입을 할 것인지 정책 설정 하는 기능',
    ],
    contributions: [
      '정책 설정 페이지, 장치 관리페이지, 사용자 출입 리스트 개발 참여',
      '한번에 다량의 데이터를 불러오는 응답 latency를 줄이기 위해 인피니티 스크롤로 수정',
      '테이블 Input Component의 onChange Event 시 불필요한 Rendering 방지를 위하여 useMemo로 수정',
      '기존의 의존성 심한 stylus 마크업 방식을 styled-component 로 변경',
    ],
    img: [
      '/project/access1.jpg',
      '/project/access2.jpg',
      '/project/access3.jpg',
      '/project/access4.jpg',
      '/project/access5.jpg',
      '/project/access6.jpg',
    ],
  },
  {
    title: '모두의 안심벨',
    type: '반응형 Web',
    role: '홈페이지 리뉴얼 FE 개발(참여)',
    skill: ['react', '반응형 UI', 'emotion/styled-component'],
    descriptions: [
      '범죄 취약지구를 위한 안심벨 홍보 및 신청 홈페이지',
      '안심벨 소개, 신청, 신청조회가 주된 기능',
      '주소 및 개인정보 입력후 안심벨을 배송 요청 할 수 있음',
      '신상정보를 이용하여 배송 상태를 확인 할 수 있음',
      '반응형 UI로 각 장치에 따라 style 분기',
    ],
    contributions: [
      '안심벨 신청 페이지, 신청 조회 페이지 개발 참여',
      '코드 리뷰를 통해 각 페이지 별 소스 일치화',
      '반응형 UI 도입',
    ],
    url: 'https://modubell.com',
    img: ['/project/safety1.jpg', '/project/safety2.jpg', '/project/safety3.jpg', '/project/safety4.jpg'],
  },
  {
    title: 'IoT Console',
    type: 'FullStack',
    role: 'BE, FE 신규 개발(개인)',
    skill: [
      'go',
      'Kubernetes API',
      'MicroServices제어',
      'electron',
      'react',
      'styled-component',
      'ace-editor',
      'rsuite',
    ],
    descriptions: [
      'Edge에 돌고 있는 IoT 서비스 Pod들의 현재 설정값과 동작 상태를 제어 하는 유틸리티 킷',
      '각 PipeLine의 요소는 각각 Pod로 구성',
      '데이터를 센서로 부 터 불러오는 Pod, 데이터를 가공하는 Pod, 데이터를 상위단으로 보내는 Pod로 나뉘어짐',
      '(BE) Edge 에서 동작 중인 IoT Deployment 정보와 설정 파일을 kubernetes API 를 통해 접근',
      '(BE) Client C.R.U.D 요청시 해당 정보를 Kuberetes API 를 통해 접근, 클라이언트에 편한 형태로 데이터 가공하여 응답',
      '(BE) gorountine 으로 동시성 유지',
      '(FE)READ, 동작중인 IoT 서비스의 현재 설정 값을 불러와 데이터 처리 절차를 사용자가 직관적으로 볼 수 있도록 PipeLine을 Display하는 기능',
      '(FE)CREATE, 사용자가 데이터를 읽어오고 싶은 곳(센서)에서 부터 가공, 타겟까지 PipeLine 을 새로 구성하는 기능',
      '(FE)UPDATE, DELETE 동작중인 IoT 서비스 PipeLine 의 구성을 수정/제거 하는 기능',
    ],
    contributions: [
      '100% 개인 개발',
      '기획 및 설계부터 시작하여, Full Stack 최초 경험',
      'CLI 및 Open API로 확인 할 수 밖에 없는 IoT 동작 상태를 UI로 표현 할 수 있게 되어 사용성 증대',
      'UI 프로그램을 통해, 관리자가 원하는 pod를 새로 만들거나 제거, 그리고 수정 할 수 있음',
      'Kubernetes 를 모르는 사람도 직관적으로 UI를 통해 IoT 서비스를 제어 할 수 있게 됨',
      'Toml 형식으로 이루어진 IoT 설정 값들의 논리적 연관 관계를 Sequence로 표현 할 수 있게 되었으며, 이에 따라 관리자가 데이터가 소스 부터 클라우드까지 처리되는 과정을 한눈에 확인 할 수 있게 됨.',
    ],
    img: [
      '/project/configurator1.jpg',
      '/project/configurator2.jpg',
      '/project/configurator3.jpg',
      '/project/configurator4.png',
      '/project/configurator5.png',
      '/project/configurator6.png',
    ],
  },
  {
    title: '상차 리프트 키오스크 앱',
    type: 'Application',
    role: '신규 FE 개발(개인)',
    skill: ['react', 'electron', 'serial-communication', 'mqtt'],
    descriptions: [
      '의료폐기물 처리용 로봇을 제어를 위한 키오스크 어플리케이션',
      '주변의 로봇을 해당 장치로 불러오도록 하여 장치에 놓인 폐기물을 로봇에게 전달하는 것이 주된 기능',
      '현재 제어 상태에 따라 사용자에게 Display 되는 화면이 결정됨',
      '로봇 호출 기능, BE로 근처의 로봇 요청',
      '로봇 호출 기능, 로봇이 없을 경우 404, 있을 경우 200',
      '폐기물 전달 제어 기능, 로봇 호출이 성공하여 로봇이 도착하면 MQTT를 통해 폐기물 전달 명령 수신',
      '폐기물 전달 제어 기능, 키오스크에 연동된 HW 장비를 시리얼 통신을 통해 제어 명령',
      '제어 상태는 MQTT Broker로 업데이트',
    ],
    contributions: [
      '100% 개인 개발',
      '현장 오류를 발견 할 수 있도록 LogReport 구현',
      'HW 연동 및 MQTT 통합 테스트 전 테스트 코드 도입을 통해, 자체적으로 유지보수 및 변경사항에 대한 검증수단 확보',
      'MQTT Client, Serial Controller, Rest API 세 가지 통신 로직의 Dependancy 를 줄이기 위해 각각 비동기식으로 구현',
    ],
    img: [
      '/project/lift_1.png',
      '/project/lift_2.png',
      '/project/lift_3.png',
      '/project/lift_4.png',
      '/project/lift_5.png',
      '/project/lift_6.png',
      '/project/lift_7.png',
    ],
    imgType: 'kiosk',
  },
  {
    title: '프리미엄 체크 V2 신규개발',
    type: 'Mobile',
    role: 'FE 신규 개발(팀원)',
    skill: ['react-native', 'mobx-state-tree', 'styled-component', 'react-query'],
    descriptions: [
      '지식산업센터 매물 거래 중계 어플리케이션',
      '당근 마켓을 모티브로 하여 지식산업센터 부동산 거래를 활성화 시키기 위한 어플리케이션',
      '주요 슬라이드 삽니다 / 팝니다 / 채팅 / 마이페이지 4가지로 구성된 어플리케이션',
      '삽니다. C.R.U.D, 삽니다로 등록된 매물리스트를 보여주고, 새로 게시, 수정, 삭제 가능하다.',
      '팝니다. C.R.U.D, 팝니다로 등록된 매물리스트를 보여주고, 새로 게시, 수정, 삭제 가능하다.',
    ],
    contributions: [
      '삽니다, 팝니다 스크린 개발',
      'React Query 를 통한 상태 관리 최적화 및 편의성 증대, Inifite Scroll 구현',
      '구매,판매 매물 게시물을 올릴 수 있는 기능 구현 , 구매, 판매 매물을 검색 할 수 있는 기능 구현',
    ],
    img: ['/project/premium.jpg'],
    imgType: 'kiosk',
  },
  {
    title: '관리자 서비스',
    type: '기타',
    role: 'FE 신규 개발(개인)',
    skill: ['react', 'redux', 'mapbox'],
    descriptions: ['자산 반입 출입 관리 앱', '의료 폐기물 관리자 서비스', '키오스크 화면 관리 서비스'],
    contributions: [
      '[자산 반입 출입 관리 앱] C.R.U.D, 자산의 위치를 화면에 보여주고, 반출입 정책 설정, 자산의 반출입 상태를 표시/관리하는 기능',
      '[자산 반입 출입 관리 앱] 기기 ID가 할당된 Tag를 자산에 부착해 이를 관리자 페이지에 Display',
      '[자산 반입 출입 관리 앱] 각 기기의 위치를 websocket을 통해 Data를 주기적으로 수신, 화면 단에 표시',
      '[의료 폐기물 관리자 서비스] C.R.U.D, 의료 폐기물의 처리 여부, 로봇을 등록 관리하는 기능',
      '[의료 폐기물 관리자 서비스] 로봇과 폐기물의 위치를 websocket을 통해 Data를 주기적으로 수신, 화면 단에 표시',
      '[키오스크 화면 관리 서비스] 화면 보호 이미지 리스트 C.R.U.D, 화면 보호기에 사용될 이미지를 등록 관리 하는 기능',
      '[키오스크 화면 관리 서비스] 스케쥴러 C.R.U.D, 화면 보호기에 사용될 이미지의 표시 시간 및 반복횟수를 관리하는 기능',
    ],
    img: [],
  },
  {
    title: 'C/C++ 개발',
    type: '기타',
    role: '임베디드 및 엣지 시스템 프로그램(참여)',
    skill: [
      'C/C++',
      'kubernetes',
      'docker',
      'boost',
      'ubuntu18/20',
      'mingw',
      'mapbox',
      'protobuf',
      'grpc',
      'serial-com',
      'tcp-com',
    ],
    descriptions: [
      '시스템 에어컨 실외기 개발',
      'IoT 프레임워크 개발',
      'Modbus/S7/TCP 통신 모듈 개발',
      'Metrics Collector 개발',
      'AMQP/UDP Sender 개발',
    ],
    contributions: [
      '[시스템 에어컨 실외기] 주어진 조건에 따라 실외기 Actuactor 제어 하는 기능',
      '[시스템 에어컨 실외기] Serial 통신, 실내기와 통신하여 실내기의 요청에 응답하는 기능',
      '[시스템 에어컨 실외기] 센서 값을 모니터링해 그에 맞는 실외기 운전 상태로 구동하는 기능',
      '[시스템 에어컨 실외기] 저항 가변 센서를 이용하여 각 개발 로직에 대한 테스트 수행',
      '[IoT 프레임워크] 산업 현장에서 각각의 센서 값으로 부터 데이터를 읽어와 처리, 송신 하는 것이 주된 기능',
      '[IoT 프레임워크] 설정값을 불러와 Target, 해당 센서의 통신방식, 데이터 가공 방식, 최종 데이터 목적지를 설정하는 기능',
      '[IoT 프레임워크] Micro 서비스로 동작, 각각의 Data Reader, Data Processor, Data Sender는 단일한 Pod로 동작하여 다음 Pod로 데이터 전달',
      '[Modbus/S7/TCP 통신 모듈] 각각 통신 스펙을 이용하여 Client 로 부터 데이터 수신하여 Processor로 전달 하는 단일 Deployment 개발',
      '[Modbus/S7/TCP 통신 모듈] 데이터를 수신하는 방법에는 Polling, Pub/sub 방식으로 동작 가능',
      '[Metrics Collector] 마이크로 서비스 아키텍쳐에서 각각의 Pod에서 데이터가 처리되는 데 소요되는 시간을 측정하기 위한 라이브러리 개발',
      '[Metrics Collector] protobuf를 이용하여 측정 값에 대한 metrics 구성, grpc를 통해 측정값 송수신',
      '[AMQP/UDP Sender] AMQP, UDP 방식으로 최종 목적지로 데이터를 송신하는 모듈 개발',
    ],
    img: [],
  },
];
